library(data.table)
library(caret)
install.packages("pbkrtest")
library(data.table)
library(ggplot2)
library(Metrics)
library(xgboost)
library(lubridate)
options(scipen = 999999)
my_theme <- theme_bw() +
theme(axis.title=element_text(size=10),
plot.title=element_text(size=15),
axis.text =element_text(size=5),
axis.text.x = element_text(angle=90, hjust=1))
source("lib.R")
# read data
col.classes <- c("Date",             "integer",           "character",
"character",          "factor",             "integer",
"Date",             "factor",             "integer",
"integer",           "Date",           "character",
"character",           "factor",           "factor",
"factor",           "factor",           "factor" ,
"integer",             "integer",           "character",
"factor",             "numeric" ,          "factor",
rep("integer",24))
setwd("~/Documents/StudyWork/Kaggle/NIJ/CODES")
library(data.table)
library(sp)
library(xgboost)
library(parallel)
library(zoo)
source("lib.R")
xx=c(1:10)
rollsum(xx,1)
rollsum(xx,2)
?rollsum
rollsum(xx,2, align = "right")
train_SC[,dow:=strftime(occ_date,"%u")]
load("../DERIVED/DATA/NIJ2012-2015_grid#_added.Rdata")
load("../DERIVED/grids_SpatialPolygons.Rdata")
panel <- subset(panel, grid!=0)
panel[,occ_date:=as.Date(occ_date)]
setorder(panel,"occ_date","grid")
areas <- unlist(lapply(panel$grid,function(x) return(s_polygons@polygons[[x]]@area)))
panel[,grid_area:=areas]
load("../DERIVED/grids_info.Rdata")
# Aggregate panel to grid-date-crime-type level
panel_grid_crime <- panel[,list(num_crimes=.N),by=c("grid","occ_date","CATEGORY","grid_area")]
rm(panel)
gc()
# Create a complete mapping of dates starting Aug'15 till May'15 with all grids
dates <- data.table(occ_date = seq.Date(as.Date("2014-01-01"),as.Date("2015-12-31"),by = "1 day"), count=1)
grids[,count:=1]
panel_master <- merge(grids[,c(1:4,6:7),with=F],dates,by="count",allow.cartesian=T)
panel_master[,count:=NULL]
panel_SC <- merge(panel_master, panel_grid_crime[CATEGORY=="STREET CRIMES",c(1,2,5),with=F], by=c("grid","occ_date"), all.x=T)
panel_SC[is.na(num_crimes),num_crimes:=0]
# get the 1 week, 2 week, 1 month, 2 month, 3 month target variable
setorder(panel_SC,"grid","occ_date")
panel_SC[,target_7:=c(rollsum(num_crimes,k=8),rep(NA,7))-num_crimes,by="grid"]
panel_SC[,target_14:=c(rollsum(num_crimes,k=15),rep(NA,14))-num_crimes,by="grid"]
panel_SC[,target_28:=c(rollsum(num_crimes,k=29),rep(NA,28))-num_crimes,by="grid"]
panel_SC[,target_56:=c(rollsum(num_crimes,k=57),rep(NA,56))-num_crimes,by="grid"]
gc()
head(panel)
head(panel_SC)
panel_SC[,target_7:=NULL]
panel_SC[,target_28:=NULL]
panel_SC[,target_14:=NULL]
panel_SC[,target_56:=NULL]
setorder(panel_SC,"grid","occ_date")
panel_SC[,target_7:=c(rollsum(num_crimes,k=7),rep(NA,6)),by="grid"]
panel_SC[,target_14:=c(rollsum(num_crimes,k=14),rep(NA,13)),by="grid"]
panel_SC[,target_28:=c(rollsum(num_crimes,k=28),rep(NA,27)),by="grid"]
panel_SC[,target_56:=c(rollsum(num_crimes,k=56),rep(NA,55)),by="grid"]
panel_SC[,target_84:=c(rollsum(num_crimes,k=84),rep(NA,83)),by="grid"]
setorder(panel_SC,"grid",-"occ_date")
panel_SC[,last_1:=c(rollsum(num_crimes,k=2),rep(NA,1))-num_crimes,by="grid"]
panel_SC[,last_2:=c(rollsum(num_crimes,k=3),rep(NA,2))-num_crimes,by="grid"]
panel_SC[,last_3:=c(rollsum(num_crimes,k=4),rep(NA,3))-num_crimes,by="grid"]
panel_SC[,last_7:=c(rollsum(num_crimes,k=8),rep(NA,7))-num_crimes,by="grid"]
panel_SC[,last_14:=c(rollsum(num_crimes,k=15),rep(NA,14))-num_crimes,by="grid"]
panel_SC[,last_28:=c(rollsum(num_crimes,k=29),rep(NA,28))-num_crimes,by="grid"]
panel_SC[,last_56:=c(rollsum(num_crimes,k=57),rep(NA,56))-num_crimes,by="grid"]
panel_SC[,last_84:=c(rollsum(num_crimes,k=85),rep(NA,84))-num_crimes,by="grid"]
head(panel_SC)
save(panel_SC,file = "../DERIVED/PANELS/panel_master_streetcrime_14_15.Rdata")
rm(list=ls()[!ls() %in% c("panel_SC","grids","getNeighbourHoodHistory")])
gc()
training_grids <- read.csv(file = "../DERIVED/final_grids_SC.csv")
train_SC <- subset(panel_SC, occ_date>=as.Date("2014-01-01") & occ_date<=as.Date("2015-02-15") & grid %in% training_grids$grid)
test_SC <- subset(panel_SC, occ_date==as.Date("2015-03-01"))
rm(panel_SC)
gc()
dim(train_SC)
67000*300
load("../DERIVED/NEIGHBOURHOOD/neighbourhood1km_hist_all_grids.Rdata")
neighbourhood_hist_allgrids[is.na(neighbourhood_hist_allgrids)] = 0
train_SC <- merge(train_SC, neighbourhood_hist_allgrids,by=c("grid","occ_date"),all.x=T)
test_SC <- merge(test_SC, neighbourhood_hist_allgrids,by=c("grid","occ_date"),all.x=T)
rm(neighbourhood_hist_allgrids)
gc()
train_SC[,dow:= as.factor(strftime(occ_date,"%u"))]
train_SC[,month:= as.factor(strftime(occ_date,"%m"))]
test_SC[,dow:= as.factor(strftime(occ_date,"%u"))]
test_SC[,month:= as.factor(strftime(occ_date,"%m"))]
x_train <- train_SC[,c("dow","month","last_1","last_2","last_3","last_14","last_28","last_56",
"neighbourhood_last_14", "neighbourhood_last_28", "neighbourhood_last_56"),with=F]
y_train <- train_SC[,target_28]
x_test <- test_SC[,c("dow","month","last_1","last_2","last_3","last_14","last_28","last_56",
"neighbourhood_last_14", "neighbourhood_last_28", "neighbourhood_last_56"),with=F]
y_test <- test_SC[,target_28]
cols.fac <- names(which(sapply(x_train,class)=="factor"))
if(length(cols.fac)>0){
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_test <- x_test[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
}
x_train[is.na(x_train)] = -999
x_test[is.na(x_test)] = -999
set.seed(123)
indx <- sample(1:nrow(x_train),nrow(x_train),replace = F)
x_train <- x_train[indx,]
y_train <- y_train[indx]
head)x_train
head(x_train)
head(indx)
train_SC[578089,]
train_SC[822125,]
gridnum = 24144
pts = as.matrix(grids[grid==gridnum,2:3,with=F])
refs = as.matrix(grids[grid!=gridnum,2:3,with=F])
distances <- distGeo(refs,pts)/1000
neighbours <- grids[which(distances<=radius),grid]
library(geosphere)
pts = as.matrix(grids[grid==gridnum,2:3,with=F])
refs = as.matrix(grids[grid!=gridnum,2:3,with=F])
distances <- distGeo(refs,pts)/1000
neighbours <- grids[which(distances<=radius),grid]
radius = 1
pts = as.matrix(grids[grid==gridnum,2:3,with=F])
refs = as.matrix(grids[grid!=gridnum,2:3,with=F])
distances <- distGeo(refs,pts)/1000
neighbours <- grids[which(distances<=radius),grid]
head(neighbours)
length(neighbours)
df2 <- subset(panel_SC, grid %in% neighbours)
df2 <- df2[,lapply(.SD,function(x) mean(x)), .SDcols = colnames(panel_SC)[13:17], by="occ_date"]
load("../DERIVED/PANELS/panel_master_streetcrime_14_15.Rdata")
df2 <- subset(panel_SC, grid %in% neighbours)
df2 <- df2[,lapply(.SD,function(x) mean(x)), .SDcols = colnames(panel_SC)[13:17], by="occ_date"]
dim(df2)
head(df2)
any(df2$occ_date==as.Date("2014-05-05"))
df2[occ_date==as.Date("2014-05-05")]
load("../DERIVED/NEIGHBOURHOOD/neighbourhood1km_hist_all_grids.Rdata")
head(neighbourhood_hist_allgrids[grid==gridnum, occ_date==as.Date("2014-05-05"),])
head(neighbourhood_hist_allgrids[grid==gridnum & occ_date==as.Date("2014-05-05"),])
dim(panel_SC)
dim(neighbourhood_hist_allgrids)
length(grids$grid)
min(neighbourhood_hist_allgrids$occ_date)
min(panel_SC$occ_date)
gc()
rm(train_SC)
rm(neighbourhood_hist_allgrids)
gc()
training_grids <- read.csv(file = "../DERIVED/final_grids_SC.csv")
# Get the training and test data; # Both training & test to contain grids based on geography
load("../DERIVED/PANELS/panel_master_streetcrime_14_15.Rdata")
train_SC <- subset(panel_SC, occ_date>=as.Date("2014-01-01") & occ_date<=as.Date("2015-02-15") & grid %in% training_grids$grid)
test_SC <- subset(panel_SC, occ_date==as.Date("2015-03-01"))
rm(panel_SC)
gc()
# Merge the Neighbourhood details
load("../DERIVED/NEIGHBOURHOOD/neighbourhood1km_hist_all_grids.Rdata")
neighbourhood_hist_allgrids[is.na(neighbourhood_hist_allgrids)] = 0
train_SC <- merge(train_SC, neighbourhood_hist_allgrids,by=c("grid","occ_date"),all.x=T)
test_SC <- merge(test_SC, neighbourhood_hist_allgrids,by=c("grid","occ_date"),all.x=T)
rm(neighbourhood_hist_allgrids)
gc()
# add dow and month
train_SC[,dow:= as.factor(strftime(occ_date,"%u"))]
train_SC[,month:= as.factor(strftime(occ_date,"%m"))]
test_SC[,dow:= as.factor(strftime(occ_date,"%u"))]
test_SC[,month:= as.factor(strftime(occ_date,"%m"))]
# Define target variable by select top 100 grids for target_7 for each date
x_train <- train_SC[,c("dow","month","last_1","last_2","last_3","last_14","last_28","last_56",
"neighbourhood_last_14", "neighbourhood_last_28", "neighbourhood_last_56"),with=F]
y_train <- train_SC[,target_28]
x_test <- test_SC[,c("dow","month","last_1","last_2","last_3","last_14","last_28","last_56",
"neighbourhood_last_14", "neighbourhood_last_28", "neighbourhood_last_56"),with=F]
y_test <- test_SC[,target_28]
cols.fac <- names(which(sapply(x_train,class)=="factor"))
if(length(cols.fac)>0){
x_train <- x_train[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
x_test <- x_test[,(cols.fac):=lapply(.SD,function(x) as.numeric(x)), .SDcols=cols.fac]
}
x_train[is.na(x_train)] = -999
x_test[is.na(x_test)] = -999
set.seed(123)
indx <- sample(1:nrow(x_train),nrow(x_train),replace = F)
x_train <- x_train[indx,]
y_train <- y_train[indx]
param <- list(max_depth = 5,
eta = 0.01,
silent = 1,
objective="reg:linear",
subsample = 0.75,
min_child_weight = 15,
colsample_bytree = 0.75)
train.xg <- xgb.DMatrix(data = as.matrix((x_train)), label=y_train, missing=-999)
test.xg <- xgb.DMatrix(as.matrix((x_test)), missing=-999)
gc()
Sys.time()
set.seed(123)
model_xgb <- xgb.train(data=train.xg, nrounds = 300,
params = param, verbose = 1, missing = -999,
#early.stop.round = 200,
maximize = F, print.every.n = 100
#watchlist = watchlist
)
Sys.time()
Sys.time()
pred_test = predict(model_xgb, test.xg, ntreelimit=model_xgb$bestInd, missing=-999)
Sys.time()
test_SC[,pred_target_28:=pred_test]
setorder(test_SC,-"target_28")
actual_spots <- test_SC[1:100,grid]
setorder(test_SC,-"pred_target_28")
pred_spots <- test_SC[1:100,grid]
length(intersect(actual_spots,pred_spots))
imp <- xgb.importance(feature_names = cols.select, model = model_xgb)
cols.select = c("dow","month","last_1","last_2","last_3","last_14","last_28","last_56",
"neighbourhood_last_14", "neighbourhood_last_28", "neighbourhood_last_56")
x_train <- train_SC[,cols.select,with=F]
imp <- xgb.importance(feature_names = cols.select, model = model_xgb)
imp
options(scipen=999999)
imp
